// <auto-generated />
using System;
using Bangazon.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Bangazon.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190422184746_BangazonTables")]
    partial class BangazonTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Bangazon.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("StreetAddress")
                        .IsRequired();

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "3be2cdcd-06c2-41a9-8fad-bbd943d30c78",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "da0b0571-5889-4eea-b103-1ce4d4460514",
                            Email = "buyer@admin.com",
                            EmailConfirmed = true,
                            FirstName = "Buyer",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "buyer@ADMIN.COM",
                            NormalizedUserName = "BUYER@ADMIN.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEe61AViKrkZwowliBTZzOicJGI0pgTb8lUJtTmAkEwR220KmDpX46lPlboGQPtw6Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1bf05187-c74a-42df-ab54-d019aa542fb8",
                            StreetAddress = "123 Buyer Way",
                            TwoFactorEnabled = false,
                            UserName = "buyer@admin.com"
                        },
                        new
                        {
                            Id = "60ba0afe-e7e6-413b-8323-e35ca6f63d6a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7c4fda6e-5705-4512-8a83-bb4ec3aed829",
                            Email = "seller@admin.com",
                            EmailConfirmed = true,
                            FirstName = "Seller",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "seller@ADMIN.COM",
                            NormalizedUserName = "SELLER@ADMIN.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJk7KXCTuNRfZHxWEXlPT/xWq/4ctag0f7yvIwv0KB1HoHn2Wzqt/A7MYel49uCBMQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c728d1d1-1c3b-46e8-b04b-48d7bb963798",
                            StreetAddress = "123 Seller Way",
                            TwoFactorEnabled = false,
                            UserName = "seller@admin.com"
                        });
                });

            modelBuilder.Entity("Bangazon.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("DateCompleted");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int?>("PaymentTypeId");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("OrderId");

                    b.HasIndex("PaymentTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Order");

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = "3be2cdcd-06c2-41a9-8fad-bbd943d30c78"
                        },
                        new
                        {
                            OrderId = 2,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PaymentTypeId = 1,
                            UserId = "3be2cdcd-06c2-41a9-8fad-bbd943d30c78"
                        });
                });

            modelBuilder.Entity("Bangazon.Models.OrderProduct", b =>
                {
                    b.Property<int>("OrderProductId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderId");

                    b.Property<int>("ProductId");

                    b.HasKey("OrderProductId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProduct");

                    b.HasData(
                        new
                        {
                            OrderProductId = 1,
                            OrderId = 1,
                            ProductId = 1
                        },
                        new
                        {
                            OrderProductId = 2,
                            OrderId = 2,
                            ProductId = 2
                        });
                });

            modelBuilder.Entity("Bangazon.Models.PaymentType", b =>
                {
                    b.Property<int>("PaymentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(55);

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("PaymentTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("PaymentType");

                    b.HasData(
                        new
                        {
                            PaymentTypeId = 1,
                            AccountNumber = "86753095551212",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "American Express",
                            UserId = "3be2cdcd-06c2-41a9-8fad-bbd943d30c78"
                        },
                        new
                        {
                            PaymentTypeId = 4,
                            AccountNumber = "9999111122220000",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Chase",
                            UserId = "3be2cdcd-06c2-41a9-8fad-bbd943d30c78"
                        },
                        new
                        {
                            PaymentTypeId = 3,
                            AccountNumber = "1111222233334444",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "VISA",
                            UserId = "3be2cdcd-06c2-41a9-8fad-bbd943d30c78"
                        },
                        new
                        {
                            PaymentTypeId = 2,
                            AccountNumber = "4102948572991",
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Discover",
                            UserId = "3be2cdcd-06c2-41a9-8fad-bbd943d30c78"
                        });
                });

            modelBuilder.Entity("Bangazon.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("ImagePath");

                    b.Property<double>("Price");

                    b.Property<int>("ProductTypeId");

                    b.Property<int>("Quantity");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(55);

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("ProductId");

                    b.HasIndex("ProductTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "It flies high",
                            Price = 2.9900000000000002,
                            ProductTypeId = 1,
                            Quantity = 100,
                            Title = "Kite",
                            UserId = "3be2cdcd-06c2-41a9-8fad-bbd943d30c78"
                        },
                        new
                        {
                            ProductId = 2,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Aluminum",
                            Price = 14.99,
                            ProductTypeId = 1,
                            Quantity = 25,
                            Title = "Baseball bat",
                            UserId = "3be2cdcd-06c2-41a9-8fad-bbd943d30c78"
                        },
                        new
                        {
                            ProductId = 3,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "It floats",
                            Price = 120.0,
                            ProductTypeId = 1,
                            Quantity = 6,
                            Title = "Kayak",
                            UserId = "3be2cdcd-06c2-41a9-8fad-bbd943d30c78"
                        },
                        new
                        {
                            ProductId = 4,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Kobeeeee",
                            Price = 201.99000000000001,
                            ProductTypeId = 1,
                            Quantity = 24,
                            Title = "Basketball",
                            UserId = "3be2cdcd-06c2-41a9-8fad-bbd943d30c78"
                        },
                        new
                        {
                            ProductId = 5,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "It does tennis things",
                            Price = 15.0,
                            ProductTypeId = 1,
                            Quantity = 19,
                            Title = "Tennis Racket",
                            UserId = "3be2cdcd-06c2-41a9-8fad-bbd943d30c78"
                        },
                        new
                        {
                            ProductId = 6,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "It washes",
                            Price = 200.0,
                            ProductTypeId = 2,
                            Quantity = 4,
                            Title = "Dishwasher",
                            UserId = "3be2cdcd-06c2-41a9-8fad-bbd943d30c78"
                        },
                        new
                        {
                            ProductId = 7,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "waste of money",
                            Price = 74.0,
                            ProductTypeId = 2,
                            Quantity = 190,
                            Title = "Quesadilla Maker",
                            UserId = "3be2cdcd-06c2-41a9-8fad-bbd943d30c78"
                        },
                        new
                        {
                            ProductId = 8,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "It's little",
                            Price = 6.9900000000000002,
                            ProductTypeId = 2,
                            Quantity = 32,
                            Title = "Toaster",
                            UserId = "3be2cdcd-06c2-41a9-8fad-bbd943d30c78"
                        },
                        new
                        {
                            ProductId = 9,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Ears sold seperately",
                            Price = 19.0,
                            ProductTypeId = 2,
                            Quantity = 35,
                            Title = "George Foreman Grill",
                            UserId = "3be2cdcd-06c2-41a9-8fad-bbd943d30c78"
                        },
                        new
                        {
                            ProductId = 10,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "you need it",
                            Price = 300.0,
                            ProductTypeId = 2,
                            Quantity = 60,
                            Title = "Fridge",
                            UserId = "3be2cdcd-06c2-41a9-8fad-bbd943d30c78"
                        },
                        new
                        {
                            ProductId = 11,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "you shoot it",
                            Price = 10.0,
                            ProductTypeId = 3,
                            Quantity = 600,
                            Title = "Nerf Gun",
                            UserId = "3be2cdcd-06c2-41a9-8fad-bbd943d30c78"
                        },
                        new
                        {
                            ProductId = 12,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "fast fun",
                            Price = 70.0,
                            ProductTypeId = 3,
                            Quantity = 10,
                            Title = "RC Car",
                            UserId = "3be2cdcd-06c2-41a9-8fad-bbd943d30c78"
                        },
                        new
                        {
                            ProductId = 13,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "don't step on me, build me",
                            Price = 80.0,
                            ProductTypeId = 3,
                            Quantity = 12,
                            Title = "Legos",
                            UserId = "3be2cdcd-06c2-41a9-8fad-bbd943d30c78"
                        },
                        new
                        {
                            ProductId = 14,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Disclamer: we won't cover your divorce costs",
                            Price = 30.0,
                            ProductTypeId = 3,
                            Quantity = 1,
                            Title = "Monopoly",
                            UserId = "3be2cdcd-06c2-41a9-8fad-bbd943d30c78"
                        },
                        new
                        {
                            ProductId = 15,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "you blow bubbles with it",
                            Price = 2.0,
                            ProductTypeId = 3,
                            Quantity = 60,
                            Title = "Bubble Wand",
                            UserId = "3be2cdcd-06c2-41a9-8fad-bbd943d30c78"
                        },
                        new
                        {
                            ProductId = 16,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Scary but won't eat you",
                            Price = 450.0,
                            ProductTypeId = 4,
                            Quantity = 60,
                            Title = "Bear Rug",
                            UserId = "3be2cdcd-06c2-41a9-8fad-bbd943d30c78"
                        },
                        new
                        {
                            ProductId = 17,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Because sitting is fun",
                            Price = 200.0,
                            ProductTypeId = 4,
                            Quantity = 25,
                            Title = "Wood Bench",
                            UserId = "3be2cdcd-06c2-41a9-8fad-bbd943d30c78"
                        },
                        new
                        {
                            ProductId = 18,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Babies go here",
                            Price = 666.0,
                            ProductTypeId = 4,
                            Quantity = 66,
                            Title = "Crib",
                            UserId = "3be2cdcd-06c2-41a9-8fad-bbd943d30c78"
                        },
                        new
                        {
                            ProductId = 19,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Orange, suede, and amazingly ugly",
                            Price = 700.0,
                            ProductTypeId = 4,
                            Quantity = 1,
                            Title = "Couch",
                            UserId = "3be2cdcd-06c2-41a9-8fad-bbd943d30c78"
                        },
                        new
                        {
                            ProductId = 20,
                            DateCreated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Cheap but impossible to put together",
                            Price = 20.0,
                            ProductTypeId = 4,
                            Quantity = 99,
                            Title = "IKEA Shelf",
                            UserId = "3be2cdcd-06c2-41a9-8fad-bbd943d30c78"
                        });
                });

            modelBuilder.Entity("Bangazon.Models.ProductType", b =>
                {
                    b.Property<int>("ProductTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("ProductTypeId");

                    b.ToTable("ProductType");

                    b.HasData(
                        new
                        {
                            ProductTypeId = 1,
                            Label = "Sporting Goods"
                        },
                        new
                        {
                            ProductTypeId = 3,
                            Label = "Toys"
                        },
                        new
                        {
                            ProductTypeId = 4,
                            Label = "Furniture"
                        },
                        new
                        {
                            ProductTypeId = 2,
                            Label = "Appliances"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Bangazon.Models.Order", b =>
                {
                    b.HasOne("Bangazon.Models.PaymentType", "PaymentType")
                        .WithMany("Orders")
                        .HasForeignKey("PaymentTypeId");

                    b.HasOne("Bangazon.Models.ApplicationUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Bangazon.Models.OrderProduct", b =>
                {
                    b.HasOne("Bangazon.Models.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Bangazon.Models.Product", "Product")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Bangazon.Models.PaymentType", b =>
                {
                    b.HasOne("Bangazon.Models.ApplicationUser", "User")
                        .WithMany("PaymentTypes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Bangazon.Models.Product", b =>
                {
                    b.HasOne("Bangazon.Models.ProductType", "ProductType")
                        .WithMany("Products")
                        .HasForeignKey("ProductTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Bangazon.Models.ApplicationUser", "User")
                        .WithMany("Products")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Bangazon.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Bangazon.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Bangazon.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Bangazon.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
